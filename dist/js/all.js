"use strict";function _classCallCheck(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass(e,n,t){return n&&_defineProperties(e.prototype,n),t&&_defineProperties(e,t),e}var restaurants,neighborhoods,cuisines,restaurant,map,DBHelper=function(){function o(){_classCallCheck(this,o)}return _createClass(o,null,[{key:"fetchRestaurants",value:function(t){fetch(o.DATABASE_URL).then(function(e){return e.json()}).then(function(e){var n=e;return console.log(t(null,n)),t(null,n)})}},{key:"fetchRestaurantById",value:function(r,a){o.fetchRestaurants(function(e,n){if(e)a(e,null);else{var t=n.find(function(e){return e.id==r});t?a(null,t):a("Restaurant does not exist",null)}})}},{key:"fetchRestaurantByCuisine",value:function(r,a){o.fetchRestaurants(function(e,n){if(e)a(e,null);else{var t=n.filter(function(e){return e.cuisine_type==r});a(null,t)}})}},{key:"fetchRestaurantByNeighborhood",value:function(r,a){o.fetchRestaurants(function(e,n){if(e)a(e,null);else{var t=n.filter(function(e){return e.neighborhood==r});a(null,t)}})}},{key:"fetchRestaurantByCuisineAndNeighborhood",value:function(r,a,i){o.fetchRestaurants(function(e,n){if(e)i(e,null);else{var t=n;"all"!=r&&(t=t.filter(function(e){return e.cuisine_type==r})),"all"!=a&&(t=t.filter(function(e){return e.neighborhood==a})),i(null,t)}})}},{key:"fetchNeighborhoods",value:function(a){o.fetchRestaurants(function(e,t){if(e)a(e,null);else{var r=t.map(function(e,n){return t[n].neighborhood}),n=r.filter(function(e,n){return r.indexOf(e)==n});a(null,n)}})}},{key:"fetchCuisines",value:function(a){o.fetchRestaurants(function(e,t){if(e)a(e,null);else{var r=t.map(function(e,n){return t[n].cuisine_type}),n=r.filter(function(e,n){return r.indexOf(e)==n});a(null,n)}})}},{key:"urlForRestaurant",value:function(e){return"./restaurant.html?id=".concat(e.id)}},{key:"imageUrlForRestaurant",value:function(e){return"/img/".concat(e.photograph)}},{key:"mapMarkerForRestaurant",value:function(e,n){return new google.maps.Marker({position:e.latlng,title:e.name,url:o.urlForRestaurant(e),map:n,animation:google.maps.Animation.DROP})}},{key:"DATABASE_URL",get:function(){return"http://localhost:".concat(1337,"/restaurants")}}]),o}(),markers=[];document.addEventListener("DOMContentLoaded",function(e){fetchNeighborhoods(),fetchCuisines()}),fetchNeighborhoods=function(){DBHelper.fetchNeighborhoods(function(e,n){e?console.error(e):(self.neighborhoods=n,fillNeighborhoodsHTML())})},fillNeighborhoodsHTML=function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:self.neighborhoods,t=document.getElementById("neighborhoods-select");e.forEach(function(e){var n=document.createElement("option");n.innerHTML=e,n.value=e,n.setAttribute("aria-label",e),t.append(n)})},fetchCuisines=function(){DBHelper.fetchCuisines(function(e,n){e?console.error(e):(self.cuisines=n,fillCuisinesHTML())})},fillCuisinesHTML=function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:self.cuisines,t=document.getElementById("cuisines-select");e.forEach(function(e){var n=document.createElement("option");n.innerHTML=e,n.value=e,t.append(n)})},window.initMap=function(){self.map=new google.maps.Map(document.getElementById("map"),{zoom:12,center:{lat:40.722216,lng:-73.987501},scrollwheel:!1}),updateRestaurants()},updateRestaurants=function(){var e=document.getElementById("cuisines-select"),n=document.getElementById("neighborhoods-select"),t=e.selectedIndex,r=n.selectedIndex,a=e[t].value,i=n[r].value;DBHelper.fetchRestaurantByCuisineAndNeighborhood(a,i,function(e,n){e?console.error(e):(resetRestaurants(n),fillRestaurantsHTML())})},resetRestaurants=function(e){self.restaurants=[],document.getElementById("restaurants-list").innerHTML="",self.markers.forEach(function(e){return e.setMap(null)}),self.markers=[],self.restaurants=e},fillRestaurantsHTML=function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:self.restaurants,n=document.getElementById("restaurants-list");e.forEach(function(e){n.append(createRestaurantHTML(e))}),addMarkersToMap()},createRestaurantHTML=function(e){var n=document.createElement("li"),t=document.createElement("img");t.className="restaurant-img",t.src=DBHelper.imageUrlForRestaurant(e),t.alt="photo of "+e.name,t.srcset="/images/".concat(e.id,"-300.jpg 300w"),n.append(t);var r=document.createElement("h3");r.innerHTML=e.name,n.append(r);var a=document.createElement("p");a.innerHTML=e.neighborhood,n.append(a);var i=document.createElement("p");i.innerHTML=e.address,n.append(i);var o=document.createElement("a");return o.innerHTML="View Details",o.href=DBHelper.urlForRestaurant(e),o.setAttribute("aria-label","Learn more about ".concat(e.name)),n.append(o),n},addMarkersToMap=function(){(0<arguments.length&&void 0!==arguments[0]?arguments[0]:self.restaurants).forEach(function(e){var n=DBHelper.mapMarkerForRestaurant(e,self.map);google.maps.event.addListener(n,"click",function(){window.location.href=n.url}),self.markers.push(n)})},"serviceWorker"in navigator&&navigator.serviceWorker.register("sw.js").then(function(){console.log("Service Worker Registered")}),window.initMap=function(){fetchRestaurantFromURL(function(e,n){e?console.error(e):(self.map=new google.maps.Map(document.getElementById("map"),{zoom:16,center:n.latlng,scrollwheel:!1}),fillBreadcrumb(),DBHelper.mapMarkerForRestaurant(self.restaurant,self.map))})},fetchRestaurantFromURL=function(t){if(self.restaurant)t(null,self.restaurant);else{var e=getParameterByName("id");e?DBHelper.fetchRestaurantById(e,function(e,n){(self.restaurant=n)?(fillRestaurantHTML(),t(null,n)):console.error(e)}):(error="No restaurant id in URL",t(error,null))}},fillRestaurantHTML=function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:self.restaurant;document.getElementById("restaurant-name").innerHTML=e.name,document.getElementById("restaurant-address").innerHTML=e.address;var n=document.getElementById("restaurant-img");n.className="restaurant-img",n.src=DBHelper.imageUrlForRestaurant(e),n.alt="photo of the "+e.name,n.srcset="/images/".concat(e.id,"-300.jpg 600w, /images/").concat(e.id,"-800.jpg 600w"),document.getElementById("restaurant-cuisine").innerHTML=e.cuisine_type,e.operating_hours&&fillRestaurantHoursHTML(),fillReviewsHTML()},fillRestaurantHoursHTML=function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:self.restaurant.operating_hours,n=document.getElementById("restaurant-hours");for(var t in n.setAttribute("role","restaurant hours"),n.setAttribute("aria-label","Restaurant Hours"),e){var r=document.createElement("tr"),a=document.createElement("td");a.innerHTML=t,r.appendChild(a);var i=document.createElement("td");i.innerHTML=e[t],r.appendChild(i),n.appendChild(r)}},fillReviewsHTML=function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:self.restaurant.reviews,n=document.getElementById("reviews-container"),t=document.createElement("h2");if(t.innerHTML="Reviews",n.appendChild(t),!e){var r=document.createElement("p");return r.innerHTML="No reviews yet!",void n.appendChild(r)}var a=document.getElementById("reviews-list");e.forEach(function(e){a.appendChild(createReviewHTML(e))}),n.appendChild(a)},createReviewHTML=function(e){var n=document.createElement("li");n.classList.add("review");var t=document.createElement("div");t.classList.add("review-heading"),n.appendChild(t);var r=document.createElement("p");r.innerHTML=e.name,r.classList.add("review-name"),t.appendChild(r);var a=document.createElement("p");a.innerHTML=e.date,a.classList.add("review-date"),t.appendChild(a);var i=document.createElement("p");i.innerHTML="RATING: ".concat(e.rating),i.classList.add("review-rating"),n.appendChild(i);var o=document.createElement("p");return o.innerHTML=e.comments,o.classList.add("review-comments"),n.appendChild(o),n},fillBreadcrumb=function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:self.restaurant,n=document.getElementById("breadcrumb"),t=document.createElement("li");document.createElement("a");t.innerHTML=e.name,n.appendChild(t),t.setAttribute("aria-current",e.name)},getParameterByName=function(e,n){n||(n=window.location.href),e=e.replace(/[\[\]]/g,"\\$&");var t=new RegExp("[?&]".concat(e,"(=([^&#]*)|&|#|$)")).exec(n);return t?t[2]?decodeURIComponent(t[2].replace(/\+/g," ")):"":null};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
